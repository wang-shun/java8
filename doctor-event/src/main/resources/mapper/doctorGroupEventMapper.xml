<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code Generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorGroupEvent">
    <resultMap id="DoctorGroupEventMap" type="DoctorGroupEvent">
        <id column="id" property="id"/>
        <result column="org_id" property="orgId"/>
        <result column="org_name" property="orgName"/>
        <result column="farm_id" property="farmId"/>
        <result column="farm_name" property="farmName"/>
        <result column="group_id" property="groupId"/>
        <result column="group_code" property="groupCode"/>
        <result column="origin" property="origin"/>
        <result column="event_at" property="eventAt"/>
        <result column="type" property="type"/>
        <result column="name" property="name"/>
        <result column="desc" property="desc"/>
        <result column="barn_id" property="barnId"/>
        <result column="barn_name" property="barnName"/>
        <result column="pig_type" property="pigType"/>
        <result column="quantity" property="quantity"/>
        <result column="weight" property="weight"/>
        <result column="avg_weight" property="avgWeight"/>
        <result column="base_weight" property="baseWeight"/>
        <result column="avg_day_age" property="avgDayAge"/>
        <result column="is_auto" property="isAuto"/>
        <result column="change_type_id" property="changeTypeId"/>
        <result column="price" property="price"/>
        <result column="amount" property="amount"/>
        <result column="over_price" property="overPrice"/>
        <result column="trans_group_type" property="transGroupType"/>
        <result column="in_type" property="inType"/>
        <result column="other_barn_id" property="otherBarnId"/>
        <result column="other_barn_type" property="otherBarnType"/>
        <result column="rel_group_event_id" property="relGroupEventId"/>
        <result column="rel_pig_event_id" property="relPigEventId"/>
        <result column="out_id" property="outId"/>
        <result column="status" property="status"/>
        <result column="event_source" property="eventSource"/>
        <result column="remark" property="remark"/>
        <result column="extra" property="extra"/>
        <result column="sow_id" property="sowId"/>
        <result column="sow_code" property="sowCode"/>
        <result column="customer_id" property="customerId"/>
        <result column="customer_name" property="customerName"/>
        <result column="basic_id" property="basicId"/>
        <result column="basic_name" property="basicName"/>
        <result column="vaccin_result" property="vaccinResult"/>
        <result column="vaccination_id" property="vaccinationId"/>
        <result column="vaccination_name" property="vaccinationName"/>
        <result column="operator_id" property="operatorId"/>
        <result column="operator_name" property="operatorName"/>
        <result column="created_at" property="createdAt"/>
        <result column="creator_id" property="creatorId"/>
        <result column="creator_name" property="creatorName"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="updator_id" property="updatorId"/>
        <result column="updator_name" property="updatorName"/>
    </resultMap>

    <sql id="tb">
        doctor_group_events
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        org_id,
        org_name,
        farm_id,
        farm_name,
        group_id,
        group_code,
        origin,
        event_at,
        `type`,
        `name`,
        `desc`,
        barn_id,
        barn_name,
        pig_type,
        quantity,
        weight,
        avg_weight,
        base_weight,
        avg_day_age,
        is_auto,
        change_type_id,
        price,
        amount,
        over_price,
        trans_group_type,
        in_type,
        other_barn_id,
        other_barn_type,
        rel_group_event_id,
        rel_pig_event_id,
        out_id,
        status,
        event_source,
        remark,
        extra,
        sow_id,
        sow_code,
        customer_id,
        customer_name,
        basic_id,
        basic_name,
        vaccin_result,
        vaccination_id,
        vaccination_name,
        operator_id,
        operator_name,
        created_at,
        creator_id,
        creator_name,
        updated_at,
        updator_id,
        updator_name
    </sql>

    <sql id="vals">
        #{orgId},
        #{orgName},
        #{farmId},
        #{farmName},
        #{groupId},
        #{groupCode},
        #{origin},
        #{eventAt},
        #{type},
        #{name},
        #{desc},
        #{barnId},
        #{barnName},
        #{pigType},
        #{quantity},
        #{weight},
        #{avgWeight},
        #{baseWeight},
        #{avgDayAge},
        #{isAuto},
        #{changeTypeId},
        #{price},
        #{amount},
        #{overPrice},
        #{transGroupType},
        #{inType},
        #{otherBarnId},
        #{otherBarnType},
        #{relGroupEventId},
        #{relPigEventId},
        #{outId},
        #{status},
        #{eventSource},
        #{remark},
        #{extra},
        #{sowId},
        #{sowCode},
        #{customerId},
        #{customerName},
        #{basicId},
        #{basicName},
        #{vaccinResult},
        #{vaccinationId},
        #{vaccinationName},
        #{operatorId},
        #{operatorName},
        now(),
        #{creatorId},
        #{creatorName},
        now(),
        #{updatorId},
        #{updatorName}
    </sql>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
            #{item.orgId},
            #{item.orgName},
            #{item.farmId},
            #{item.farmName},
            #{item.groupId},
            #{item.groupCode},
            #{item.origin},
            #{item.eventAt},
            #{item.type},
            #{item.name},
            #{item.desc},
            #{item.barnId},
            #{item.barnName},
            #{item.pigType},
            #{item.quantity},
            #{item.weight},
            #{item.avgWeight},
            #{item.baseWeight},
            #{item.avgDayAge},
            #{item.isAuto},
            #{item.changeTypeId},
            #{item.price},
            #{item.amount},
            #{item.overPrice},
            #{item.transGroupType},
            #{item.inType},
            #{item.otherBarnId},
            #{item.otherBarnType},
            #{item.relGroupEventId},
            #{item.relPigEventId},
            #{item.outId},
            #{item.status},
            #{item.eventSource},
            #{item.remark},
            #{item.extra},
            #{item.sowId},
            #{item.sowCode},
            #{item.customerId},
            #{item.customerName},
            #{item.basicId},
            #{item.basicName},
            #{item.vaccinResult},
            #{item.vaccinationId},
            #{item.vaccinationName},
            #{item.operatorId},
            #{item.operatorName},
            now(),
            #{item.creatorId},
            #{item.creatorName},
            now(),
            #{item.updatorId},
            #{item.updatorName}
            )
        </foreach>
    </insert>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="orgId != null">AND org_id = #{orgId}</if>
        <if test="orgName != null">AND org_name = #{orgName}</if>
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="farmName != null">AND farm_name = #{farmName}</if>
        <if test="groupId != null">AND group_id = #{groupId}</if>
        <if test="groupCode != null">AND group_code = #{groupCode}</if>
        <if test="origin != null">AND origin = #{origin}</if>
        <if test="groupCodeFuzzy != null">AND group_code LIKE concat('%', #{groupCodeFuzzy},'%')</if>
        <if test="eventAt != null">AND event_at = #{eventAt}</if>
        <if test="beginDate != null">AND <![CDATA[ event_at >= #{beginDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ event_at <= #{endDate} ]]> </if>
        <if test="type != null">AND `type` = #{type}</if>
        <if test="name != null">AND `name` = #{name}</if>
        <if test="desc != null"> AND`desc` = #{desc}</if>
        <if test="barnId != null">AND barn_id = #{barnId}</if>
        <if test="barnName != null">AND barn_name = #{barnName}</if>
        <if test="pigType != null">AND pig_type = #{pigType}</if>
        <if test="quantity != null">AND quantity = #{quantity}</if>
        <if test="weight != null">AND weight = #{weight}</if>
        <if test="avgWeight != null">AND avg_weight = #{avgWeight}</if>
        <if test="baseWeight != null">AND base_weight = #{baseWeight}</if>
        <if test="avgDayAge != null">AND avg_day_age = #{avgDayAge}</if>
        <if test="isAuto != null">AND is_auto = #{isAuto}</if>
        <if test="changeTypeId != null">AND change_type_id = #{changeTypeId}</if>
        <if test="price != null">AND price = #{price}</if>
        <if test="amount != null">AND amount = #{amount}</if>
        <if test="overPrice != null">AND over_price = #{overPrice}</if>
        <if test="transGroupType != null">AND trans_group_type = #{transGroupType}</if>
        <if test="inType != null">AND in_type = #{inType}</if>
        <if test="notInType != null">AND in_type != #{notInType}</if>
        <if test="otherBarnId != null">AND other_barn_id = #{otherBarnId}</if>
        <if test="otherBarnType != null">AND other_barn_type = #{otherBarnType}</if>
        <if test="relGroupEventId != null">AND rel_group_event_id = #{relGroupEventId}</if>
        <if test="relPigEventId != null">AND rel_pig_event_id = #{relPigEventId}</if>
        <if test="outId != null">AND out_id = #{outId}</if>
        <if test="remark != null">AND remark = #{remark}</if>
        <if test="eventSource != null">AND event_source = #{eventSource}</if>
        <if test="extra != null">AND extra = #{extra}</if>
        <if test="sowId != null">AND sow_id = #{sowId}</if>
        <if test="sowCode != null">AND sow_code = #{sowCode}</if>
        <if test="customerId != null">AND customer_id = #{customerId}</if>
        <if test="customerName != null">AND customer_name = #{customerName}</if>
        <if test="basicId != null">AND basic_id = #{basicId}</if>
        <if test="basicName != null">AND basic_name = #{basicName}</if>
        <if test="vaccinResult != null">AND vaccin_result = #{vaccinResult}</if>
        <if test="vaccinationId != null">AND vaccination_id = #{vaccinationId}</if>
        <if test="vaccinationName != null">AND vaccination_name = #{vaccinationName}</if>
        <if test="operatorId != null">AND operator_id = #{operatorId}</if>
        <if test="operatorName != null">AND operator_name = #{operatorName}</if>
        <if test="creatorId != null">AND creator_id = #{creatorId}</if>
        <if test="creatorName != null">AND creator_name = #{creatorName}</if>
        <if test="updatorId != null">AND updator_id = #{updatorId}</if>
        <if test="updatorName != null">AND updator_name = #{updatorName}</if>
        <if test="tag != null">AND `type` != #{tag} </if>
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        <if test="eventSources !=null and eventSources.size()>0">
            AND (`event_source` IN
            <foreach collection="eventSources" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>
            OR (
            `event_source` NOT IN
            <foreach collection="eventSources" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>
            <if test="beginDate != null">
            AND
            <![CDATA[ event_at >= #{beginDate} ]]>
            </if>
            AND <![CDATA[ event_at <= #{endDate} ]]>
            )
            )
        </if>
        <if test="pigTypes != null &amp;&amp; pigTypes.size() > 0">
            AND `pig_type` IN
            <foreach collection="pigTypes" item="pigType" open="(" close=")" separator=",">
                #{pigType}
            </foreach>
        </if>

        <if test="changeTypeIds != null &amp;&amp; changeTypeIds.size() > 0">
            AND `change_type_id` IN
            <foreach collection="changeTypeIds" item="changeTypeId" open="(" close=")" separator=",">
                #{changeTypeId}
            </foreach>
        </if>
    </sql>
    <insert id="create" parameterType="DoctorGroupEvent" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <select id="countByBarnId" parameterType="long" resultType="long">
        select count(id) from <include refid="tb" /> where status = 1 AND `barn_id` = #{barnId}
    </select>

    <update id="updateIncludeNull" parameterType="DoctorGroupEvent">
        UPDATE <include refid="tb"/>
        <set>
            org_id = #{orgId},
            org_name = #{orgName},
            farm_id = #{farmId},
            farm_name = #{farmName},
            group_id = #{groupId},
            group_code = #{groupCode},
            event_at = #{eventAt},
            `type` = #{type},
            `name` = #{name},
            `desc` = #{desc},
            barn_id = #{barnId},
            barn_name = #{barnName},
            pig_type = #{pigType},
            quantity = #{quantity},
            weight = #{weight},
            avg_weight = #{avgWeight},
            base_weight = #{baseWeight},
            avg_day_age = #{avgDayAge},
            is_auto = #{isAuto},
            change_type_id = #{changeTypeId},
            price = #{price},
            amount = #{amount},
            over_price = #{overPrice},
            trans_group_type = #{transGroupType},
            in_type = #{inType},
            other_barn_id = #{otherBarnId},
            other_barn_type = #{otherBarnType},
            rel_group_event_id = #{relGroupEventId},
            rel_pig_event_id = #{relPigEventId},
            out_id = #{outId},
            status = #{status},
            event_source = #{eventSource},
            remark = #{remark},
            extra = #{extra},
            sow_id = #{sowId},
            sow_code = #{sowCode},
            customer_id = #{customerId},
            customer_name = #{customerName},
            basic_id = #{basicId},
            basic_name = #{basicName},
            vaccin_result = #{vaccinResult},
            vaccination_id = #{vaccinationId},
            vaccination_name = #{vaccinationName},
            operator_id = #{operatorId},
            operator_name = #{operatorName},
            creator_id = #{creatorId},
            creator_name = #{creatorName},
            updator_id = #{updatorId},
            updator_name = #{updatorName},
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <update id="update" parameterType="DoctorGroupEvent">
        UPDATE <include refid="tb"/>
        <set>
            <if test="orgId != null">org_id = #{orgId},</if>
            <if test="orgName != null">org_name = #{orgName},</if>
            <if test="farmId != null">farm_id = #{farmId},</if>
            <if test="farmName != null">farm_name = #{farmName},</if>
            <if test="groupId != null">group_id = #{groupId},</if>
            <if test="groupCode != null">group_code = #{groupCode},</if>
            <if test="origin != null">origin = #{origin},</if>
            <if test="eventAt != null">event_at = #{eventAt},</if>
            <if test="type != null">`type` = #{type},</if>
            <if test="name != null">`name` = #{name},</if>
            <if test="desc != null">`desc` = #{desc},</if>
            <if test="barnId != null">barn_id = #{barnId},</if>
            <if test="barnName != null">barn_name = #{barnName},</if>
            <if test="pigType != null">pig_type = #{pigType},</if>
            <if test="quantity != null">quantity = #{quantity},</if>
            <if test="weight != null">weight = #{weight},</if>
            <if test="avgWeight != null">avg_weight = #{avgWeight},</if>
            <if test="baseWeight != null">base_weight = #{baseWeight},</if>
            <if test="avgDayAge != null">avg_day_age = #{avgDayAge},</if>
            <if test="isAuto != null">is_auto = #{isAuto},</if>
            <if test="changeTypeId != null">change_type_id = #{changeTypeId},</if>
            <if test="price != null">price = #{price},</if>
            <if test="amount != null">amount = #{amount},</if>
            <if test="overPrice != null">over_price = #{overPrice},</if>
            <if test="transGroupType != null">trans_group_type = #{transGroupType},</if>
            <if test="inType != null">in_type = #{inType},</if>
            <if test="otherBarnId != null">other_barn_id = #{otherBarnId},</if>
            <if test="otherBarnType != null">other_barn_type = #{otherBarnType},</if>
            <if test="relGroupEventId != null">rel_group_event_id = #{relGroupEventId},</if>
            <if test="relPigEventId != null">rel_pig_event_id = #{relPigEventId},</if>
            <if test="outId != null">out_id = #{outId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="eventSource != null">event_source = #{eventSource},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="extra != null">extra = #{extra},</if>
            <if test="sowId != null">sow_id = #{sowId},</if>
            <if test="sowCode != null">sow_code = #{sowCode},</if>
            <if test="customerId != null">customer_id = #{customerId},</if>
            <if test="customerName != null">customer_name = #{customerName},</if>
            <if test="basicId != null">basic_id = #{basicId},</if>
            <if test="basicName != null">basic_name = #{basicName},</if>
            <if test="vaccinResult != null">vaccin_result = #{vaccinResult},</if>
            <if test="vaccinationId != null">vaccination_id = #{vaccinationId},</if>
            <if test="vaccinationName != null">vaccination_name = #{vaccinationName},</if>
            <if test="operatorId != null">operator_id = #{operatorId},</if>
            <if test="operatorName != null">operator_name = #{operatorName},</if>
            <if test="creatorId != null">creator_id = #{creatorId},</if>
            <if test="creatorName != null">creator_name = #{creatorName},</if>
            <if test="updatorId != null">updator_id = #{updatorId},</if>
            <if test="updatorName != null">updator_name = #{updatorName},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="findByFarmId" parameterType="long" resultMap="DoctorGroupEventMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
    </select>

    <select id="findByGroupId" parameterType="long" resultMap="DoctorGroupEventMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE group_id = #{groupId}
    </select>

    <select id="updateGroupCodeByGroupId" parameterType="map" resultMap="DoctorGroupEventMap">
        UPDATE <include refid="tb"/>
        SET group_code = #{groupCode}
        WHERE group_id = #{groupId}
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) from <include refid="tb"/>
        where status = 1
        <include refid="criteria"/>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorGroupEventMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        where status = 1
        <include refid="criteria"/>
        ORDER BY DATE_FORMAT(event_at,'%Y-%m-%d') DESC, id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="list" parameterType="map" resultMap="DoctorGroupEventMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        where status = 1
        <include refid="criteria"/>
    </select>

    <select id="findGroupEventsByEventTypeAndDate" parameterType="map" resultMap="DoctorGroupEventMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        <where>
            <if test="farmId != null">AND farm_id = #{farmId}</if>
            <if test="eventType != null">AND `type` = #{eventType}</if>
            <if test="startAt != null">AND event_at &gt;= #{startAt}</if>
            <if test="endAt != null">AND event_at &lt;= #{endAt}</if>
        </where>
    </select>


    <select id="findByDateRange" parameterType="map" resultMap="DoctorGroupEventMap">
        select
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        where status = 1
        <if test="beginDate != null">
            <![CDATA[ and event_at >= #{beginDate} ]]>
        </if>
        <if test="endDate != null">
            <![CDATA[ and event_at < #{endDate} ]]>
        </if>
        limit 5000
    </select>

    <select id="findLastEventByGroupId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId}
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC, id DESC limit 1
    </select>

    <select id="findLastEventExcludeTypes" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId}
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` NOT IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC, id DESC limit 1
    </select>

    <select id="findEventIncludeTypes" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId}
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        ORDER BY date_format(event_at, '%Y-%m-%d') ASC , id ASC
    </select>

    <select id="findEventIncludeTypesForDesc" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND event_at &gt;= #{eventAt}
        AND group_id = #{groupId}
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC , id DESC
    </select>

    <select id="findLastManualEventByGroupId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId} AND is_auto = 0
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC, id DESC limit 1
    </select>

    <select id="findByRelGroupEventIdAndType" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND rel_group_event_id = #{relGroupEventId} AND type = #{type}
    </select>

    <select id="findByRelPigEventId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND rel_pig_event_id = #{relPigEventId}
    </select>

    <select id="canRollbackEvent" parameterType="map" resultMap="DoctorGroupEventMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        where status = 1
        <include refid="criteria"/>
        order by date_format(event_at, '%Y-%m-%d') desc ,id DESC limit 1;
    </select>

    <select id="findOperators" parameterType="map" resultType="io.terminus.doctor.event.dto.event.DoctorEventOperator">
        SELECT distinct operator_name AS operatorName,  operator_id AS operatorId
        FROM
        <include refid="tb"/>
        WHERE status = 1
        AND operator_id IS NOT NULL
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        <if test="farmId != null">AND `farm_id` = #{farmId}</if>
    </select>

    <select id="findLastGroupEventByType" parameterType="map" resultMap="DoctorGroupEventMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE status = 1
        AND group_id = #{groupId}
        AND `type` = #{type}
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC, id DESC limit 1
    </select>

    <select id="findInitGroupEvent" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE status = 1
        AND group_id = #{groupId}
        ORDER BY date_format(event_at, '%Y-%m-%d') ASC , id ASC limit 1
    </select>

    <select id="findLinkedGroupEventsByGroupId" parameterType="long" resultMap="DoctorGroupEventMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE status = 1
        AND group_id = #{groupId}
        ORDER BY date_format(event_at, '%Y-%m-%d') asc, id asc
    </select>

    <update id="updateGroupEventStatus" parameterType="map">
        UPDATE <include refid="tb"/>
        SET status = #{status}
        WHERE id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </update>

    <select id="findEventById" parameterType="long" resultMap="DoctorGroupEventMap">
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="updateFarmName" parameterType="map" >
        UPDATE <include refid="tb"/>
        SET farm_name = #{farmName}
        WHERE
        farm_id = #{farmId}
    </update>

    <select id="queryRelPigEventIdsByGroupWeanEvent" parameterType="map" resultType="long">
        SELECT rel_pig_event_id
        FROM <include refid="tb" />
        WHERE
        status =1
        AND type = 11
        <if test="farmId != -1" > AND farm_id = #{farmId}</if>
    </select>

    <delete id="deleteAddWeanEvents" parameterType="long" >
        DELETE
        FROM <include refid="tb" />
        WHERE
        farm_id = #{farmId} AND event_source = 4
    </delete>

    <select id="findNewGroupByGroupId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE group_id = #{groupId}
        AND type = 1
        AND status = 1
    </select>

    <select id="findCloseGroupByGroupId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE group_id = #{groupId}
        AND type = 10
        AND status = 1
    </select>

    <select id="findByRelPigEventIdAndType" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE rel_pig_event_id = #{relPigEventId}
        AND `type` = #{type}
        AND status = 1
    </select>

    <select id="getEventCount" parameterType="long" resultType="int" >
        SELECT
        ifnull(
        sum(
        CASE WHEN TYPE = 2 THEN quantity ELSE 0 END -
        CASE WHEN TYPE IN (3, 4, 9) THEN quantity ELSE 0 END -
        CASE WHEN TYPE = 5 THEN 1 ELSE 0 END
        )
        ,0) as event_count
        from <include refid="tb"/>
        where type in(2,3,4,5,9)
        and status = 1
        AND group_id = #{groupId}
    </select>

    <delete id="deleteByFarmId" parameterType="long" >
        DELETE
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
        <if test="pigTypes != null &amp;&amp; pigTypes.size()>0">
            AND pig_type IN
            <foreach collection="pigTypes" item="pigType" open="(" separator="," close=")" >
                 #{pigType}
            </foreach>
        </if>
    </delete>

    <delete id="deleteByGroupId" parameterType="long" >
        DELETE FROM
        <include refid="tb"/>
        WHERE group_id = #{groupId}
    </delete>

    <select id="getFarmEarlyEventAt" parameterType="string" resultType="io.terminus.doctor.event.dto.DoctorFarmEarlyEventAtDto" >
        SELECT farm_id as farmId, min(event_at) as eventAt
        FROM <include refid="tb"/>
        WHERE updated_at &gt;= #{startDate}
        group by farm_id
    </select>

    <select id="findAllGroupIdWithChangeNoAvgDayAge" resultType="long" >
        select group_id
        from <include refid="tb"/>
        where type = 3
        and `avg_day_age` is null
        GROUP BY group_id
    </select>

    <update id="updateAvgDayAge" parameterType="map" >
        UPDATE <include refid="tb"/>
        set avg_day_age = #{avgDayAge}
        WHERE id = #{id}
    </update>

    <select id="findCareSales" parameterType="map" resultType="io.terminus.doctor.event.dto.DoctorPigSalesExportDto">
        select
        a.event_at as salesDate,
        a.customer_id as customerId,
        c.name as client,
        a.pig_type as pigType,
        "保育猪" as pigTypeName,
        a.barn_name as barnName,
        a.avg_day_age * a.quantity / a.quantity as ages,
        a.quantity as pigNumber,
        a.weight as pigWeight,
        a.amount / a.weight as pigPrice,
        a.amount as pigAmount,
        b.breed_id as breedId,
        b.breed_name as breedName
        from doctor_group_events a left join doctor_groups b on  a.group_id = b.id
        left join doctor_customers c on a.customer_id = c.id
        where a.type = 3
        and a.pig_type = 2
        and a.change_type_id = 109
        <if test="breedsId != null">AND b.breed_id = #{breedsId}</if>
        <if test="farmId != null">AND a.farm_id = #{farmId}</if>
        <if test="batch != null">AND a.group_code = #{batch}</if>
        <if test="barnId != null">AND a.barn_id = #{barnId}</if>
        <if test="barnName != null">AND a.barn_name = #{barnName}</if>
        <if test="client != null">AND a.customer_id = #{client}</if>
        <if test="startDate != null">AND <![CDATA[ a.event_at >= #{startDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ a.event_at <= #{endDate} ]]> </if>
        order by a.event_at ASC ;
    </select>

    <select id="findNurseSales" parameterType="map" resultType="io.terminus.doctor.event.dto.DoctorPigSalesExportDto">
        select
        a.event_at as salesDate,
        a.customer_id as customerId,
        c.name as client,
        a.pig_type as pigType,
        "仔猪" as pigTypeName,
        a.barn_name as barnName,
        a.avg_day_age * a.quantity / a.quantity as ages,
        a.quantity as pigNumber,
        a.weight as pigWeight,
        a.amount/a.weight as pigPrice,
        a.amount as pigAmount,
        b.breed_id as breedId,
        b.breed_name as breedName
        from doctor_group_events a left join doctor_groups b on a.group_id = b.id
        left join doctor_customers c on a.customer_id = c.id
        where a.type = 3
        and a.pig_type = 7
        and a.change_type_id = 109
        <if test="breedsId != null">AND b.breed_id = #{breedsId}</if>
        <if test="farmId != null">AND a.farm_id = #{farmId}</if>
        <if test="batch != null">AND a.group_code = #{batch}</if>
        <if test="barnId != null">AND a.barn_id = #{barnId}</if>
        <if test="barnName != null">AND a.barn_name = #{barnName}</if>
        <if test="client != null">AND a.customer_id = #{client}</if>
        <if test="startDate != null">AND <![CDATA[ a.event_at >= #{startDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ a.event_at <= #{endDate} ]]> </if>
        order by a.event_at ASC ;
    </select>

    <select id="findReverseSales" parameterType="map" resultType="io.terminus.doctor.event.dto.DoctorPigSalesExportDto">
        select
        a.event_at as salesDate,
        a.customer_id as customerId,
        c.name as client,
        a.pig_type as pigType,
        "后备猪" as pigTypeName,
        a.barn_name as barnName,
        a.avg_day_age * a.quantity / a.quantity  as ages,
        a.quantity as pigNumber,
        a.weight as pigWeight,
        a.amount / a.weight as pigPrice,
        a.amount as pigAmount,
        b.breed_id as breedId,
        b.breed_name as breedName
        from doctor_group_events a left join doctor_groups b on a.group_id = b.id
        left join doctor_customers c on a.customer_id = c.id
        where a.type = 3
        and a.pig_type = 4
        and a.change_type_id = 109
        <if test="breedsId != null">AND b.breed_id = #{breedsId}</if>
        <if test="farmId != null">AND a.farm_id = #{farmId}</if>
        <if test="batch != null">AND a.group_code = #{batch}</if>
        <if test="barnId != null">AND a.barn_id = #{barnId}</if>
        <if test="barnName != null">AND a.barn_name = #{barnName}</if>
        <if test="client != null">AND a.customer_id = #{client}</if>
        <if test="startDate != null">AND <![CDATA[ a.event_at >= #{startDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ a.event_at <= #{endDate} ]]> </if>
        order by a.event_at ASC ;
    </select>

    <select id="findFattenSales" parameterType="map" resultType="io.terminus.doctor.event.dto.DoctorPigSalesExportDto">
        select
        a.event_at as salesDate,
        a.customer_id as customerId,
        c.name as client,
        a.pig_type as pigType,
        "育肥猪" as pigTypeName,
        a.barn_name as barnName,
        a.avg_day_age * a.quantity / a.quantity as ages,
        a.quantity as pigNumber,
        a.weight as pigWeight,
        a.amount / a.weight as pigPrice,
        a.amount as pigAmount,
        b.breed_id as breedId,
        b.breed_name as breedName
        from doctor_group_events a left join doctor_groups b on a.group_id = b.id
        left join doctor_customers c on a.customer_id = c.id
        where a.type = 3
        and a.pig_type = 3
        and a.change_type_id = 109
        <if test="breedsId != null">AND b.breed_id = #{breedsId}</if>
        <if test="farmId != null">AND a.farm_id = #{farmId}</if>
        <if test="batch != null">AND a.group_code = #{batch}</if>
        <if test="barnId != null">AND a.barn_id = #{barnId}</if>
        <if test="barnName != null">AND a.barn_name = #{barnName}</if>
        <if test="client != null">AND a.customer_id = #{client}</if>
        <if test="startDate != null">AND <![CDATA[ a.event_at >= #{startDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ a.event_at <= #{endDate} ]]> </if>
        order by a.event_at ASC ;
    </select>

    <sql id="saleCriteria">
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="batch != null">AND group_code = #{batch}</if>
        <if test="barnId != null">AND barn_id = #{barnId}</if>
        <if test="barnName != null">AND barn_name = #{barnName}</if>
        <if test="client != null">AND customer_id = #{client}</if>
        <if test="startDate != null">AND <![CDATA[ event_at >= #{startDate} ]]> </if>
        <if test="endDate != null">AND <![CDATA[ event_at <= #{endDate} ]]> </if>
    </sql>

    <select id="findEarLyAt" resultType="io.terminus.doctor.event.dto.DoctorFarmEarlyEventAtDto">
        select farm_id as farmId, min(event_at) as eventAt
        from <include refid="tb"/>
        group by farm_id
    </select>


    <select id="findGroupEvents" parameterType="map" resultMap="DoctorGroupEventMap">
        select * from doctor_group_events where farm_id = #{farmId} and (type=3 or type=4 or type=5 or type=9 or type=10) and group_id=(
        select group_id from doctor_group_events where rel_pig_event_id = #{relPigEventId} and farm_id = #{farmId}
        ) and id>(
        select id from doctor_group_events where rel_pig_event_id = #{relPigEventId} and farm_id = #{farmId}
        )ORDER BY event_at DESC,id DESC
    </select>

    <select id="groupList" parameterType="map" resultType="map">
        select b.id as group_id,b.group_code, b.pig_type, b.current_barn_id, b.current_barn_name, c.staff_id, c.staff_name ,b.open_at as build_event_at,b.close_at as close_event_at
        from doctor_groups b
        join doctor_barns c on b.current_barn_id = c.id
        where b.farm_id = #{farmId} and
        ((b.status = 1 and date(b.open_at) &lt;= #{time}) or (b.status = -1 and date(b.open_at) &lt;= #{time} and date(b.close_at) >= #{time}))
        <if test="barn != null">and c.id = #{barn}</if>
        <if test="groupCode != null and groupCode != ''"> AND b.group_code like CONCAT(CONCAT('%',#{groupCode}),'%')</if>
        <if test="operatorName != null and operatorName != ''"> AND c.staff_name like CONCAT(CONCAT('%',#{operatorName}),'%')</if>
        <if test="groupType != null">and c.pig_type = #{groupType}</if>
        <if test="buildBeginGroupTime != null">and date(b.open_at) >= #{buildBeginGroupTime}</if>
        <if test="buildEndGroupTime != null">and date(b.open_at) &lt;= #{buildEndGroupTime}</if>
        <if test="closeBeginGroupTime != null">and date(b.close_at) >= #{closeBeginGroupTime}</if>
        <if test="closeEndGroupTime != null">and date(b.close_at) &lt;= #{closeEndGroupTime}</if>
    </select>
    <select id="groupList1" parameterType="map" resultType="map">
        select b.id as group_id,b.group_code, b.pig_type, b.current_barn_id, b.current_barn_name, c.staff_id, c.staff_name ,b.close_at as close_event_at,b.open_at as build_event_at
        from doctor_groups b
        join doctor_barns c on b.current_barn_id = c.id
        where b.farm_id = #{farmId} and b.status = -1
        and date(b.close_at) = #{time}
        <if test="barn != null">and c.id = #{barn}</if>
        <if test="groupCode != null and groupCode != ''"> AND b.group_code like CONCAT(CONCAT('%',#{groupCode}),'%')</if>
        <if test="operatorName != null and operatorName != ''"> AND c.staff_name like CONCAT(CONCAT('%',#{operatorName}),'%')</if>
        <if test="groupType != null">and c.pig_type = #{groupType}</if>
        <if test="buildBeginGroupTime != null">and date(b.open_at) >= #{buildBeginGroupTime}</if>
        <if test="buildEndGroupTime != null">and date(b.open_at) &lt;= #{buildEndGroupTime}</if>
        <if test="closeBeginGroupTime != null">and date(b.close_at) >= #{closeBeginGroupTime}</if>
        <if test="closeEndGroupTime != null">and date(b.close_at) &lt;= #{closeEndGroupTime}</if>
    </select>
    <select id="groupList2" parameterType="map" resultType="map">
        select a.group_id,a.group_code, b.pig_type, b.current_barn_id, b.current_barn_name, c.staff_id, c.staff_name ,a.event_at
        from doctor_group_events a
        join doctor_groups b on a.group_id = b.id
        join doctor_barns c on b.current_barn_id = c.id
        where a.farm_id = #{farmId} and a.status = 1
        <if test="time != null">and a.event_at &lt;= #{time}</if>
        <if test="barn != null">and c.id = #{barn}</if>
        <if test="groupCode != null"> AND a.group_code like CONCAT(CONCAT('%',#{groupCode}),'%')</if>
        <if test="operatorName != null"> AND c.staff_name like CONCAT(CONCAT('%',#{operatorName}),'%')</if>
        <if test="groupType != null">and c.pig_type = #{groupType}</if>
        <if test="buildBeginGroupTime != null">and a.event_at >= #{buildBeginGroupTime}</if>
        <if test="buildEndGroupTime != null">and a.event_at &lt;= #{buildEndGroupTime}</if>
        group by a.group_id
    </select>
    <select id="getCunlan" parameterType="map" resultType="Integer">
        select
        IFNULL((select sum(quantity) from doctor_group_events where group_id = #{groupId} and status = 1 and event_at &lt;= #{time} and type in (2)),0)
        -
        IFNULL((select sum(quantity) from doctor_group_events where type in (3,4,5,9) and status = 1  and event_at &lt;= #{time} and group_id = #{groupId}),0)
        from dual
    </select>
    <select id="getInAvgweight" parameterType="map" resultType="Double">
       select
        IFNULL((select sum(weight) from doctor_group_events where group_id = #{groupId} and status = 1 and event_at &lt;= #{time} and type in (2)),0)
        /
        IFNULL((select sum(quantity) from doctor_group_events where group_id = #{groupId} and status = 1 and event_at &lt;= #{time} and type in (2)),0)
        from dual
    </select>
    <select id="getOutAvgweight" parameterType="map" resultType="Double">
        select
        IFNULL((select sum(weight) from doctor_group_events where group_id = #{groupId} and status = 1 and event_at &lt;= #{time} and type in (3,4,5,9)),0)
        /
        IFNULL((select sum(quantity) from doctor_group_events where group_id = #{groupId} and status = 1 and event_at &lt;= #{time} and type in (3,4,5,9)),0)
        from dual
    </select>
    <select id="getAvgDayAge" parameterType="map" resultType="Double">
      select
        (IFNULL((select sum((DATEDIFF(#{time},event_at)+avg_day_age)*quantity) from doctor_group_events where type = 2 and status = 1 and group_id = #{groupId}),0)
        -IFNULL((select sum(quantity*(DATEDIFF(#{time},event_at)+(avg_day_age-(DATEDIFF(updated_at,event_at))))) from doctor_group_events where type in (3,4,5,9) and status = 1 and group_id = #{groupId}),0))
      from dual
    </select>
    <select id="getBuildEventAt" parameterType="map" resultType="Date">
       select event_at from doctor_group_events where group_id = #{groupId} and type = 1 and status = 1
    </select>
    <select id="findEventIncludeTypes1" parameterType="map" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId}
        and event_at &lt;= #{time}
        <if test="types != null &amp;&amp; types.size() > 0">
            AND `type` IN
            <foreach collection="types" item="i" open="(" close=")" separator=",">
                #{i}
            </foreach>
        </if>
        ORDER BY date_format(event_at, '%Y-%m-%d') ASC , id ASC
    </select>
    <select id="isCloseGroup" parameterType="map" resultType="int">
         select count(1) from doctor_groups where id = #{groupId} and status = 1
    </select>
    <select id="lastEventByGroupId" parameterType="long" resultMap="DoctorGroupEventMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE status = 1
        AND group_id = #{groupId}
        and type != 11
        ORDER BY date_format(event_at, '%Y-%m-%d') DESC, id DESC limit 1
    </select>
</mapper>