<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code Generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorBarn">
    <resultMap id="DoctorBarnMap" type="DoctorBarn">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="org_id" property="orgId"/>
        <result column="org_name" property="orgName"/>
        <result column="farm_id" property="farmId"/>
        <result column="farm_name" property="farmName"/>
        <result column="pig_type" property="pigType"/>
        <result column="can_open_group" property="canOpenGroup"/>
        <result column="status" property="status"/>
        <result column="capacity" property="capacity"/>
        <result column="staff_id" property="staffId"/>
        <result column="staff_name" property="staffName"/>
        <result column="out_id" property="outId"/>
        <result column="extra" property="extra"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        
    </resultMap>

    <sql id="tb">
        doctor_barns
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        name, org_id, org_name, farm_id, farm_name, pig_type, can_open_group, status, capacity, staff_id, staff_name, out_id, extra, created_at, updated_at
    </sql>

    <sql id="vals">
        #{name}, #{orgId}, #{orgName}, #{farmId}, #{farmName}, #{pigType}, #{canOpenGroup}, #{status}, #{capacity}, #{staffId}, #{staffName}, #{outId}, #{extra}, now(), now()
    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="name != null"> AND name LIKE CONCAT('%', #{name}, '%')</if>
        <if test="orgId != null">AND org_id = #{orgId}</if>
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="pigType != null">AND pig_type = #{pigType}</if>

        <if test="pigTypes != null  &amp;&amp; pigTypes.size() > 0">AND pig_type IN
            <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
                #{type}
            </foreach>
        </if>

        <if test="barnIds != null  &amp;&amp; barnIds.size() > 0">AND id IN
            <foreach collection="barnIds" item="bid" open="(" separator="," close=")">
                #{bid}
            </foreach>
        </if>

        <if test="canOpenGroup != null">AND can_open_group = #{canOpenGroup}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="capacity != null">AND capacity = #{capacity}</if>
        <if test="staffId != null">AND staff_id = #{staffId}</if>
        <if test="staffName != null">AND staff_name like concat('%',#{staffName},'%')</if>
    </sql>

    <insert id="create" parameterType="DoctorBarn" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
            #{item.name},
            #{item.orgId},
            #{item.orgName},
            #{item.farmId},
            #{item.farmName},
            #{item.pigType},
            #{item.canOpenGroup},
            #{item.status},
            #{item.capacity},
            #{item.staffId},
            #{item.staffName},
            #{item.outId},
            #{item.extra},
            now(),
            now()
            )
        </foreach>
    </insert>

    <select id="findById" parameterType="long" resultMap="DoctorBarnMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

   <!--
    /**2018920f
    * 当前所属猪舍的性别
    */-->
    <select id="findByBarnsId" parameterType="long"  resultType="map">

        SELECT  a.id, a.name, a.org_id, a.org_name, a.farm_id, a.farm_name, a.pig_type,
        a.can_open_group, a.status, a.capacity, a.staff_id, a.staff_name, a.out_id, a.extra,
        a.created_at, a.updated_at , b.id, b.group_code ,c.sex
        FROM doctor_barns a
		left JOIN doctor_groups b on  a.farm_id = b.farm_id
		left JOIN doctor_group_tracks c on  b.id = c.group_id
        WHERE  a.id = #{id} and b.id = #{groupId}

    </select>

    <!--
   /**2018920f
   * 转入猪场的猪舍及其里的猪群信息性别
   */-->
    <select id="findSexByFarmsId" parameterType="long" resultType="map">
       select distinct c.current_barn_name ,c.sex , c.id from	(SELECT  a.group_code ,b.sex as sex,b.group_id, a.current_barn_id as id , a.current_barn_name as current_barn_name
	   FROM doctor_groups a
	   INNER JOIN doctor_group_tracks b on a.id = b.group_id
	   where a.farm_id = #{farmId}) c
    </select>


    <update id="update" parameterType="DoctorBarn">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="orgId != null">org_id = #{orgId},</if>
            <if test="orgName != null">org_name = #{orgName},</if>
            <if test="farmId != null">farm_id = #{farmId},</if>
            <if test="farmName != null">farm_name = #{farmName},</if>
            <if test="pigType != null">pig_type = #{pigType},</if>
            <if test="canOpenGroup != null">can_open_group = #{canOpenGroup},</if>
            <if test="status != null">status = #{status},</if>
            <if test="capacity != null">capacity = #{capacity},</if>
            <if test="staffId != null">staff_id = #{staffId},</if>
            <if test="staffName != null">staff_name = #{staffName},</if>
            <if test="outId != null">out_id = #{outId},</if>
            <if test="extra != null">extra = #{extra},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>
    
    <select id="findByFarmId" parameterType="long" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
    </select>



    <select id="findByFarmIds" parameterType="list" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id in
        <foreach collection="list" open="(" separator="," close=")" item="farmId">
            #{farmId}
        </foreach>
    </select>
    <select id="findByFarmId1" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId} and (pig_type = 5 or pig_type = 6) and status = 1
    </select>
    <select id="findByFarmId2" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId} and pig_type = 9 and status = 1
    </select>
    <select id="findByFarmId3" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId} and (pig_type = 9 or pig_type = 5 or pig_type = 6) and status = 1
    </select>

    <select id="findByOutId" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE
        farm_id = #{farmId}
        AND out_id = #{outId}
    </select>

    <select id="findByEnums" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <where>
            <if test="farmId != null">AND farm_id = #{farmId}</if>
            <if test="pigTypes != null  &amp;&amp; pigTypes.size() > 0">AND pig_type IN
                <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>

            <if test="barnIds != null  &amp;&amp; barnIds.size() > 0">AND id IN
                <foreach collection="barnIds" item="bid" open="(" separator="," close=")">
                    #{bid}
                </foreach>
            </if>

            <if test="canOpenGroup != null">AND can_open_group = #{canOpenGroup}</if>
            <if test="status != null">AND status = #{status}</if>
            <if test="status == null">AND status = 1</if>
        </where>
    </select>

    <select id="findByEnums1" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <where>
            <if test="farmId != null">AND farm_id = #{farmId}</if>
            <if test="pigTypes != null  &amp;&amp; pigTypes.size() > 0">AND pig_type IN
                <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>

            <if test="barnIds != null  &amp;&amp; barnIds.size() > 0">AND id IN
                <foreach collection="barnIds" item="bid" open="(" separator="," close=")">
                    #{bid}
                </foreach>
            </if>

            <if test="canOpenGroup != null">AND can_open_group = #{canOpenGroup}</if>
            <if test="status != null and status == 5">AND status in (0,1,-1) </if>
        </where>
    </select>

    <!--/*
    * 根据farmId和当前用户查猪舍
    * 冯雨晴 2019.9.18
    *
    * */-->
    <select id="findByEnumss" parameterType="map" resultType="map">
        SELECT id, name
        from doctor_barns
        where farm_id = #{farmId}
        and id in
        <foreach collection="barnIds" item="barnId" open="(" separator="," close=")">
            #{barnId}
        </foreach>
        and pig_type in
        <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
            #{type}
        </foreach>
        <if test="status != null">AND status = #{status}</if>
        <if test="status == null">AND status = 1</if>
    </select>

    <select id="findByEnums2" parameterType="map" resultMap="DoctorBarnMap">
        SELECT id, name
        from doctor_barns
        where farm_id = #{farmId}
        and id in
        <foreach collection="barnIds" item="barnId" open="(" separator="," close=")">
            #{barnId}
        </foreach>
        and pig_type in
        <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
            #{type}
        </foreach>
        <if test="status != null and status == 5">AND status in (0,1,-1) </if>
    </select>


    <select id="findNameByBarnIds" parameterType="map" resultType="map">
        SELECT id, name
        from doctor_barns
        where id= #{id}
    </select>


    <!-- search api start -->
    <select id="maxId" resultType="long">
        SELECT MAX(id) FROM
        <include refid="tb"/>
    </select>

    <select id="listSince" parameterType="map" resultMap="DoctorBarnMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE  <![CDATA[
          id < #{lastId} AND updated_at > #{since}
        ]]>
        ORDER BY id DESC LIMIT #{limit}
    </select>
    <!-- search api end -->

    <select id="findByOrgId" parameterType="long" resultMap="DoctorBarnMap">
        select
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        where org_id = #{orgId}
    </select>

    <select id="countForTypes" parameterType="map" resultType="io.terminus.doctor.event.dto.DoctorBarnCountForPigTypeDto" >
        SELECT
        max(CASE WHEN pig_type = 2 THEN temp.quantity ELSE 0 END ) AS nurseryPigletCount,
        max(CASE WHEN pig_type = 3 THEN temp.quantity ELSE 0 END ) AS fattenPigCount,
        max(CASE WHEN pig_type = 4 THEN temp.quantity ELSE 0 END ) AS reserveCount,
        max(CASE WHEN pig_type = 5 THEN temp.quantity ELSE 0 END ) AS mateSowCount,
        max(CASE WHEN pig_type = 6 THEN temp.quantity ELSE 0 END ) AS pregSowCount,
        max(CASE WHEN pig_type = 7 THEN temp.quantity ELSE 0 END ) AS deliverSowCount,
        max(CASE WHEN pig_type = 9 THEN temp.quantity ELSE 0 END ) AS boarCount
        FROM (
        SELECT pig_type, ifnull(COUNT(1), 0) AS quantity
        FROM
        <include refid="tb"/>
        WHERE
        <if test="farmId != null">farm_id = #{farmId}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="status == null">AND status = 1</if>
        and FIND_IN_SET(id,(select barn_ids from doctor_user_data_permissions where user_id = #{userId}))
        GROUP BY pig_type
        ) AS temp
    </select>

    <select id="list" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <!--分页排序规则：后备4、配种5、妊娠6、产房 1,7、保育2、育肥3 、公猪9-->
        ORDER BY
          CASE
            WHEN pig_type = 4 THEN 10
            WHEN pig_type = 5 THEN 9
            WHEN pig_type = 6 THEN 8
            WHEN pig_type = 1 THEN 7
            WHEN pig_type = 7 THEN 7
            WHEN pig_type = 2 THEN 6
            WHEN pig_type = 3 THEN 5
            WHEN pig_type = 9 THEN 4
          END DESC, `name`
        LIMIT #{offset}, #{limit}
    </select>

    <select id="findBarnByFarmAndBarnName" parameterType="map" resultType="DoctorBarn" >
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            farm_id=#{farmId} AND `name` = #{name}
        </where>

    </select>

    <update id="updateFarmName" parameterType="map" >
        UPDATE <include refid="tb"/>
        SET farm_name = #{farmName}
        WHERE
        farm_id = #{farmId}
    </update>
    
    <select id="getDefaultPregBarn" parameterType="long"  resultMap="DoctorBarnMap" >
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
        AND pig_type = 6
        AND status = 1
        limit 1
    </select>

    <select id="selectBarns" parameterType="map" resultMap="DoctorBarnMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE
        1=1
        <if test="orgId != null"> AND org_id = #{orgId}</if>
        <if test="farmId != null"> AND farm_id = #{farmId}</if>
        <if test="name != null">AND `name` like concat('%', #{name}, '%')</if>
        ORDER BY instr(`name`, #{name}) ASC, length(`name`) ASC, `name` ASC
        limit #{count}
    </select>
    <select id="findBarnTypeById" parameterType="map" resultType="map">
        SELECT pig_type,name,staff_name
        from doctor_barns
        where id = #{barnId}
    </select>
    <select id="qichucunlan" parameterType="map" resultType="Integer">
        select
        (select count(a.pig_id)
          from doctor_pig_events a
          join (select min(id) id,pig_id from doctor_pig_events where farm_id = #{farmId} and  status = 1 and event_at > date_sub(#{beginTime},interval 1 day) group by pig_id) b
                on a.pig_id = b.pig_id and a.barn_id = #{barnId} and a.farm_id = #{farmId} and a.id = b.id and a.status = 1)
        +
        (select count(a.pig_id) from doctor_pig_events a join (select current_event_id from doctor_pig_tracks where current_barn_id = #{barnId} and is_removal=0) b on a.id = b.current_event_id where a.event_at &lt;= date_sub(#{beginTime},interval 1 day) and a.status = 1)
        from dual
    </select>
    <select id="qimucunlan" parameterType="map" resultType="Integer">
        select
        (select count(a.pig_id)
        from doctor_pig_events a
        join (select min(id) id,pig_id from doctor_pig_events where farm_id = #{farmId} and  status = 1 and event_at > #{endTime} group by pig_id) b
        on a.pig_id = b.pig_id and a.barn_id = #{barnId} and a.farm_id = #{farmId} and a.id = b.id and a.status = 1)
        +
        (select count(a.pig_id) from doctor_pig_events a join (select current_event_id from doctor_pig_tracks where current_barn_id = #{barnId} and is_removal=0) b on a.id = b.current_event_id where a.event_at &lt;= #{endTime} and a.status = 1)
        from dual
    </select>
    <select id="jianshao" parameterType="map" resultType="map">
        SELECT change_type_id,count(*) as count
        from doctor_pig_events
        where barn_id = #{barnId}
        and event_at >= #{beginTime}
        and event_at&lt;= #{endTime}
        and type = 6
        and status = 1
        group by change_type_id
    </select>
    <select id="zhuanchu" parameterType="map" resultType="Integer">
        SELECT count(*)
        from doctor_pig_events
        where barn_id = #{barnId}
        and event_at >= #{beginTime}
        and event_at&lt;= #{endTime}
        and status = 1
        and type in (1,2,10,12,14)
    </select>
    <select id="findBarnIdsByfarmId" parameterType="map" resultType="map">
        select id,pig_type,name,staff_name from doctor_barns
        where farm_id = #{farmId}
        <if test="operatorName != null and operatorName != ''">AND staff_name like concat('%',#{operatorName},'%')</if>
        <if test="barnName != null and barnName != ''">AND name like concat('%',#{barnName},'%')</if>
        <if test="pigType != null and pigType != 17 and pigType != 27">AND pig_type = #{pigType}</if>
        <if test="pigType != null and (pigType == 17 or pigType == 27)">AND pig_type = 7</if>
    </select>
    <select id="groupqichucunlan" parameterType="map" resultType="Integer">
        select
        IFNULL((select sum(a.quantity) from doctor_group_events a join doctor_groups b on a.group_id = b.id where a.barn_id = #{barnId} and a.status = 1 and (b.close_at > #{beginTime} or b.close_at is null) and a.event_at &lt; #{beginTime} and a.type in (2)),0)
        -
        IFNULL((select sum(a.quantity) from doctor_group_events  a join doctor_groups b on a.group_id = b.id where a.type in (3,4,5,9) and a.status = 1 and (b.close_at > #{beginTime} or b.close_at is null)  and a.event_at &lt; #{beginTime} and a.barn_id = #{barnId}),0)
        from dual
    </select>
    <select id="groupqimucunlan" parameterType="map" resultType="Integer">
        select
        IFNULL((select sum(a.quantity) from doctor_group_events a join doctor_groups b on a.group_id = b.id where a.barn_id = #{barnId} and a.status = 1 and (b.close_at > #{endTime} or b.close_at is null) and a.event_at &lt;= #{endTime} and a.type in (2)),0)
        -
        IFNULL((select sum(a.quantity) from doctor_group_events a join doctor_groups b on a.group_id = b.id where a.type in (3,4,5,9) and a.status = 1  and (b.close_at > #{endTime} or b.close_at is null) and a.event_at &lt;= #{endTime} and a.barn_id = #{barnId}),0)
        from dual
    </select>
    <select id="groupzhuanru" parameterType="map" resultType="Integer">
        select
        IFNULL((select sum(quantity) from doctor_group_events where barn_id = #{barnId} and status = 1 and event_at &lt;= #{endTime} and event_at >= #{beginTime} and type in (2)),0)
        from dual
    </select>
    <select id="groupzhuanchu" parameterType="map" resultType="Integer">
        select
          IFNULL((select sum(quantity) from doctor_group_events where type in (4,5,9) and status = 1  and event_at &lt;= #{endTime} and event_at >= #{beginTime} and barn_id = #{barnId}),0)
        from dual
    </select>
    <select id="groupjianshao" parameterType="map" resultType="map">
        SELECT change_type_id,sum(quantity) as count
        from doctor_group_events
        where barn_id = #{barnId}
        and event_at >= #{beginTime}
        and event_at&lt;= #{endTime}
        and type = 3
        and status = 1
        group by change_type_id
    </select>
    <select id="findStaffNameByBarnId" parameterType="long" resultType="String">
        select a.staff_name as staffName
        from doctor_barns a
        where id = #{barnId}
    </select>
</mapper>