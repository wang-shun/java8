<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code Generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorGroup">
    <resultMap id="DoctorGroupMap" type="DoctorGroup">
        <id column="id" property="id"/>
        <result column="org_id" property="orgId"/>
        <result column="org_name" property="orgName"/>
        <result column="farm_id" property="farmId"/>
        <result column="farm_name" property="farmName"/>
        <result column="group_code" property="groupCode"/>
        <result column="batch_no" property="batchNo"/>
        <result column="open_at" property="openAt"/>
        <result column="close_at" property="closeAt"/>
        <result column="status" property="status"/>
        <result column="init_barn_id" property="initBarnId"/>
        <result column="init_barn_name" property="initBarnName"/>
        <result column="current_barn_id" property="currentBarnId"/>
        <result column="current_barn_name" property="currentBarnName"/>
        <result column="pig_type" property="pigType"/>
        <result column="breed_id" property="breedId"/>
        <result column="breed_name" property="breedName"/>
        <result column="genetic_id" property="geneticId"/>
        <result column="genetic_name" property="geneticName"/>
        <result column="staff_id" property="staffId"/>
        <result column="staff_name" property="staffName"/>
        <result column="remark" property="remark"/>
        <result column="out_id" property="outId"/>
        <result column="extra" property="extra"/>
        <result column="creator_id" property="creatorId"/>
        <result column="creator_name" property="creatorName"/>
        <result column="updator_id" property="updatorId"/>
        <result column="updator_name" property="updatorName"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        
    </resultMap>

    <sql id="tb">
        doctor_groups
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        org_id, org_name, farm_id, farm_name, group_code, batch_no, open_at, close_at, status, init_barn_id, init_barn_name, current_barn_id, current_barn_name, pig_type, breed_id, breed_name, genetic_id, genetic_name, staff_id, staff_name, remark, out_id, extra, creator_id, creator_name, updator_id, updator_name, created_at, updated_at
    </sql>

    <sql id="vals">
        #{orgId}, #{orgName}, #{farmId}, #{farmName}, #{groupCode}, #{batchNo}, #{openAt}, #{closeAt}, #{status}, #{initBarnId}, #{initBarnName}, #{currentBarnId}, #{currentBarnName}, #{pigType}, #{breedId}, #{breedName}, #{geneticId}, #{geneticName}, #{staffId}, #{staffName}, #{remark}, #{outId}, #{extra}, #{creatorId}, #{creatorName}, #{updatorId}, #{updatorName}, now(), now()
    </sql>

    <sql id="criteria">
        <if test="orgId != null">AND org_id = #{orgId}</if>
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="initBarnId != null">AND init_barn_id = #{initBarnId}</if>
        <if test="currentBarnId != null">AND current_barn_id = #{currentBarnId}</if>
        <if test="barnIdList != null">
            and current_barn_id in
            <foreach collection="barnIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="pigType != null">AND pig_type = #{pigType}</if>
        <if test="pigTypes != null  &amp;&amp; pigTypes.size() > 0">AND pig_type IN
            <foreach collection="pigTypes" item="type" open="(" separator="," close=")">
                #{type}
            </foreach>
        </if>
        <if test="breedId != null">AND breed_id = #{breedId}</if>
        <if test="geneticId != null">AND genetic_id = #{geneticId}</if>
        <if test="staffId != null">AND staff_id = #{staffId}</if>
        <if test="startOpenAt != null">AND open_at &gt;= #{startOpenAt}</if>
        <if test="endOpenAt != null">AND open_at &lt;= #{endOpenAt}</if>
        <if test="startCloseAt != null">AND close_at &gt;= #{startCloseAt}</if>
        <if test="endCloseAt != null">AND close_at &lt;= #{endCloseAt}</if>
        <if test="groupCode != null">AND group_code like concat('%', #{groupCode}, '%') </if>
    </sql>

    <insert id="create" parameterType="DoctorGroup" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="DoctorGroupMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <select id="findByIds" parameterType="long" resultMap="DoctorGroupMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <update id="update" parameterType="DoctorGroup">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="orgId != null">org_id = #{orgId},</if>
            <if test="orgName != null">org_name = #{orgName},</if>
            <if test="farmId != null">farm_id = #{farmId},</if>
            <if test="farmName != null">farm_name = #{farmName},</if>
            <if test="groupCode != null">group_code = #{groupCode},</if>
            <if test="batchNo != null">batch_no = #{batchNo},</if>
            <if test="openAt != null">open_at = #{openAt},</if>
            <if test="closeAt != null">close_at = #{closeAt},</if>
            <if test="status != null">status = #{status},</if>
            <if test="status == 1">close_at = NULL,</if>
            <if test="initBarnId != null">init_barn_id = #{initBarnId},</if>
            <if test="initBarnName != null">init_barn_name = #{initBarnName},</if>
            <if test="currentBarnId != null">current_barn_id = #{currentBarnId},</if>
            <if test="currentBarnName != null">current_barn_name = #{currentBarnName},</if>
            <if test="pigType != null">pig_type = #{pigType},</if>
            <if test="breedId != null">breed_id = #{breedId},</if>
            <if test="breedName != null">breed_name = #{breedName},</if>
            <if test="geneticId != null">genetic_id = #{geneticId},</if>
            <if test="geneticName != null">genetic_name = #{geneticName},</if>
            <if test="staffId != null">staff_id = #{staffId},</if>
            <if test="staffName != null">staff_name = #{staffName},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="outId != null">out_id = #{outId},</if>
            <if test="extra != null">extra = #{extra},</if>
            <if test="creatorId != null">creator_id = #{creatorId},</if>
            <if test="creatorName != null">creator_name = #{creatorName},</if>
            <if test="updatorId != null">updator_id = #{updatorId},</if>
            <if test="updatorName != null">updator_name = #{updatorName},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>
    
    <select id="findByFarmId" parameterType="long" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) from <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        ORDER BY group_code DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="list" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>


    <select id="fingByStatus" parameterType="int" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE status = #{status}
    </select>

    <select id="findByCurrentBarnId" parameterType="long" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE current_barn_id = #{currentBarnId} AND status = 1
    </select>

    <select id="findByCurrentBarnIdAndQuantity" parameterType="long" resultMap="DoctorGroupMap">
        SELECT g.* FROM doctor_groups as g
        inner join doctor_group_tracks as gt
        on g.id=gt.group_id
        WHERE g.current_barn_id = #{currentBarnId} AND g.status = 1
    </select>

    <select id="findByFarmIdAndGroupCode" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId} AND group_code = #{groupCode}
        LIMIT 1
    </select>

    <select id="findBySearchDto" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
            #{item.orgId},
            #{item.orgName},
            #{item.farmId},
            #{item.farmName},
            #{item.groupCode},
            #{item.batchNo},
            #{item.openAt},
            #{item.closeAt},
            #{item.status},
            #{item.initBarnId},
            #{item.initBarnName},
            #{item.currentBarnId},
            #{item.currentBarnName},
            #{item.pigType},
            #{item.breedId},
            #{item.breedName},
            #{item.geneticId},
            #{item.geneticName},
            #{item.staffId},
            #{item.staffName},
            #{item.remark},
            #{item.outId},
            #{item.extra},
            #{item.creatorId},
            #{item.creatorName},
            #{item.updatorId},
            #{item.updatorName},
            now(),
            now()

            )
        </foreach>
    </insert>

    <select id="findByFarmIdAndBarnIdAndDate" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        WHERE farm_id = #{farmId}
          AND current_barn_id = #{barnId}
          AND open_at &lt;= #{date}
          AND (close_at &gt;= DATE(#{date}) OR close_at IS NULL)
        limit 1
    </select>

    <select id="findCurrentFarrowByBarnId" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        WHERE current_barn_id = #{barnId}
          AND `status` = #{status}
        limit 1
    </select>

    <update id="updateFarmName" parameterType="map" >
        UPDATE <include refid="tb"/>
        SET farm_name = #{farmName}
        WHERE
        farm_id = #{farmId}
    </update>

    <select id="findByFarmIdAndDate" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        WHERE farm_id = #{farmId}
        AND open_at &lt;= #{openAt}
        AND (status = 1 OR close_at &gt;= #{colseAt})
    </select>

    <select id="findGroupSumByFarmIdAndDate" parameterType="map" resultMap="DoctorGroupMap">
        select
            null as id,
            farm_id,
            null as group_id,
            `type`,
            sum_at,
            ifnull(sum(`start`),0) as `start`,
            ifnull(sum(wean_count),0) as wean_count,
            ifnull(sum(unwean_count),0) as unwean_count,
            ifnull(sum(inner_in),0) as inner_in,
            ifnull(sum(outer_in),0) as outer_in,
            ifnull(sum(sale),0) as sale,
            ifnull(sum(dead),0) as dead,
            ifnull(sum(weed_out),0) as weed_out,
            ifnull(sum(other_change),0) as other_change,
            ifnull(sum(chg_farm),0) as chg_farm,
            ifnull(sum(inner_out),0) as inner_out,
            ifnull(sum(outer_out),0) as outer_out,
            ifnull(sum(`end`),0) as `end`
        from doctor_daily_groups
        group by farm_id, `type`, sum_at
    </select>

    <select id="findGroupId" parameterType="map" resultMap="DoctorGroupMap">

        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE 1 = 1
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="startAt != null" > <![CDATA[ AND `open_at` >= #{startAt} ]]> </if>
        <if test="endAt != null" > <![CDATA[ AND `close_at` <= #{endAt} ]]> </if>
    </select>

    <select id="findGroupByBarnId" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE 1 = 1
        <include refid="criteria"/>
    </select>

    <update id="updateCurrentBarnName" parameterType="map" >
        UPDATE <include refid="tb"/>
        SET current_barn_name = #{currentBarnName}
        WHERE current_barn_id = #{currentBarnId}
    </update>

    <select id="findFarmToGroupCount" resultType="map" >
        SELECT farm_id AS farmId, ifnull(COUNT(*), 0) AS groupCount
        FROM <include refid="tb"/>
        WHERE status = 1
        GROUP BY farm_id
    </select>
    <select id="findByFarmIdAndPigTypeAndStatus" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE
        farm_id = #{farmId}
        AND pig_type = #{pigType}
        AND status = #{status}
    </select>

    <select id="findByFarmAndOutId" parameterType="map" resultMap="DoctorGroupMap" >
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE
        farm_id = #{farmId}
        AND out_id = #{OutId}
    </select>

    <delete id="deleteByFarmId" parameterType="map" >
        DELETE
        FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
        <if test="pigTypes != null &amp;&amp; pigTypes.size()>0">
            AND pig_type IN
            <foreach collection="pigTypes" item="pigType" open="(" separator="," close=")" >
                #{pigType}
            </foreach>
        </if>
    </delete>

    <update id="updateStaffName" parameterType="map" >
        UPDATE <include refid="tb"/>
        SET staff_id = #{staffId},
        staff_name = #{staffName}
        WHERE current_barn_id = #{currentBarnId}
    </update>

    <select id="listOpenGroupsBy" parameterType="string" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <where>
            open_at &lt;= #{date}
            AND (close_at is null or close_at &gt;= #{date})
        </where>
    </select>

    <select id="findGroupByCurrentBarnIdFuzzy" parameterType="map" resultMap="DoctorGroupMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        WHERE current_barn_id = #{currentBarnId} AND status = 1
        <if test="groupCode != null">AND `group_code` like concat('%', #{groupCode}, '%')</if>
    </select>

    <select id="findGroupQuantityByGroupCode" parameterType="string" resultType="long">
        select b.quantity
        from doctor_groups a join doctor_group_tracks b
        on a.id = b.group_id
        where a.group_code = #{groupCode}
    </select>
</mapper>